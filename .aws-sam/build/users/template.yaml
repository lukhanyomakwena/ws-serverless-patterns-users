AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM Template for Serverless Patterns v8 - Observability - Dashboard

  '
Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active
Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators
    Type: String
    Default: apiAdmins
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-Users
      AttributeDefinitions:
      - AttributeName: userid
        AttributeType: S
      KeySchema:
      - AttributeName: userid
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/users.lambda_handler
      Description: Handler for all users related operations
      Environment:
        Variables:
          USERS_TABLE:
            Ref: UsersTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
      Events:
        GetUsersEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId:
              Ref: RestAPI
        PutUserEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId:
              Ref: RestAPI
        UpdateUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: put
            RestApiId:
              Ref: RestAPI
        GetUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: get
            RestApiId:
              Ref: RestAPI
        DeleteUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: delete
            RestApiId:
              Ref: RestAPI
      CodeUri: UsersFunction
    Metadata:
      SamResourceId: UsersFunction
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Tags:
        Name:
          Fn::Sub: ${AWS::StackName}-API
        Stack:
          Fn::Sub: ${AWS::StackName}
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - AuthorizerFunction
              - Arn
            Identity:
              Headers:
              - Authorization
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - AccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "integrationStatus":
          $context.integrationStatus, "integrationLatency": $context.integrationLatency,
          "responseLength":"$context.responseLength" }'
      MethodSettings:
      - ResourcePath: /*
        LoggingLevel: INFO
        HttpMethod: '*'
        DataTraceEnabled: true
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      UsernameAttributes:
      - email
      UserPoolTags:
        Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} User Pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      CallbackURLs:
      - http://localhost
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: UserPoolClient
      UserPoolId:
        Ref: UserPool
  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName:
        Ref: UserPoolAdminGroupName
      Precedence: 0
      UserPoolId:
        Ref: UserPool
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/authorizer.lambda_handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
          APPLICATION_CLIENT_ID:
            Ref: UserPoolClient
          ADMIN_GROUP_NAME:
            Ref: UserPoolAdminGroupName
      Tags:
        Stack:
          Fn::Sub: ${AWS::StackName}
      CodeUri: AuthorizerFunction
    Metadata:
      SamResourceId: AuthorizerFunction
  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccountLoggingSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiLoggingRole
        - Arn
  AccessLogs:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiLoggingRole
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /${AWS::StackName}/APIAccessLogs
  AlarmsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
      - Key: Stack
        Value:
          Fn::Sub: ${AWS::StackName}
  RestAPIErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ApiName
        Value:
          Ref: RestAPI
      EvaluationPeriods: 1
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Sum
      Threshold: 1.0
  AuthorizerFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: AuthorizerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
  AuthorizerFunctionThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: AuthorizerFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
  UsersFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: UsersFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
  UsersFunctionThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlarmsTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: UsersFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName:
        Fn::Sub: ${AWS::StackName}-dashboard
      DashboardBody:
        Fn::Sub: "{\n  \"widgets\": [\n      {\n          \"height\": 6,\n       \
          \   \"width\": 6,\n          \"y\": 6,\n          \"x\": 0,\n          \"\
          type\": \"metric\",\n          \"properties\": {\n              \"metrics\"\
          : [\n                  [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\"\
          , \"${UsersFunction}\" ],\n                  [ \".\", \"Errors\", \".\"\
          , \".\" ],\n                  [ \".\", \"Throttles\", \".\", \".\" ],\n\
          \                  [ \".\", \"Duration\", \".\", \".\", { \"stat\": \"Average\"\
          \ } ],\n                  [ \".\", \"ConcurrentExecutions\", \".\", \".\"\
          , { \"stat\": \"Maximum\" } ]\n              ],\n              \"view\"\
          : \"timeSeries\",\n              \"region\": \"${AWS::Region}\",\n     \
          \         \"stacked\": false,\n              \"title\": \"Users Lambda\"\
          ,\n              \"period\": 60,\n              \"stat\": \"Sum\"\n    \
          \      }\n      },\n      {\n          \"height\": 6,\n          \"width\"\
          : 6,\n          \"y\": 6,\n          \"x\": 6,\n          \"type\": \"metric\"\
          ,\n          \"properties\": {\n              \"metrics\": [\n         \
          \         [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\", \"${AuthorizerFunction}\"\
          \ ],\n                  [ \".\", \"Errors\", \".\", \".\" ],\n         \
          \         [ \".\", \"Throttles\", \".\", \".\" ],\n                  [ \"\
          .\", \"Duration\", \".\", \".\", { \"stat\": \"Average\" } ],\n        \
          \          [ \".\", \"ConcurrentExecutions\", \".\", \".\", { \"stat\":\
          \ \"Maximum\" } ]\n              ],\n              \"view\": \"timeSeries\"\
          ,\n              \"region\": \"${AWS::Region}\",\n              \"stacked\"\
          : false,\n              \"title\": \"Authorizer Lambda\",\n            \
          \  \"period\": 60,\n              \"stat\": \"Sum\"\n          }\n     \
          \ },\n      {\n          \"height\": 6,\n          \"width\": 12,\n    \
          \      \"y\": 0,\n          \"x\": 0,\n          \"type\": \"metric\",\n\
          \          \"properties\": {\n              \"metrics\": [\n           \
          \       [ \"AWS/ApiGateway\", \"4XXError\", \"ApiName\", \"${AWS::StackName}\"\
          , { \"yAxis\": \"right\" } ],\n                  [ \".\", \"5XXError\",\
          \ \".\", \".\", { \"yAxis\": \"right\" } ],\n                  [ \".\",\
          \ \"DataProcessed\", \".\", \".\", { \"yAxis\": \"left\" } ],\n        \
          \          [ \".\", \"Count\", \".\", \".\", { \"label\": \"Count\", \"\
          yAxis\": \"right\" } ],\n                  [ \".\", \"IntegrationLatency\"\
          , \".\", \".\", { \"stat\": \"Average\" } ],\n                  [ \".\"\
          , \"Latency\", \".\", \".\", { \"stat\": \"Average\" } ]\n             \
          \ ],\n              \"view\": \"timeSeries\",\n              \"stacked\"\
          : false,\n              \"region\": \"${AWS::Region}\",\n              \"\
          period\": 60,\n              \"stat\": \"Sum\",\n              \"title\"\
          : \"API Gateway\"\n          }\n      }\n  ]\n}\n"
Outputs:
  UsersTable:
    Description: DynamoDB Users table
    Value:
      Ref: UsersTable
  UsersFunction:
    Description: Lambda function used to perform actions on the users data
    Value:
      Ref: UsersFunction
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod
  UserPool:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value:
      Ref: UserPoolClient
  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value:
      Ref: UserPoolAdminGroupName
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value:
      Fn::Sub: https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost
  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value:
      Fn::Sub: aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id
        ${UserPoolClient} --auth-parameters USERNAME=<username>,PASSWORD=<password>
        --query "AuthenticationResult.IdToken" --output text
  AlarmsTopic:
    Description: SNS Topic to be used for the alarms subscriptions
    Value:
      Ref: AlarmsTopic
  DashboardURL:
    Description: Dashboard URL
    Value:
      Fn::Sub: https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ApplicationDashboard}
